def find_min_edge(matrix, Vt):
    min_edge = None
    min_weight= float('inf')
    V = len(matrix)

    for u in Vt:
        for v in range(V):
            if v not in Vt and matrix[u][v] > 0 and matrix[u][v] < min_weight:
                min_edge=(u, v, matrix[u][v]) 
                min_weight= matrix[u][v] 
    return min_edge, min_weight

def prim(matrix):
    V = len(matrix)
    start_vertex = 0      # Start with the first vertex ( index 0)
    Vt = {start_vertex}   # Set of tree vertices, initialized with the first vertex
    Et=[]                 # Set of edges in the minimum spanning tree
    total_weight=0        # Total weight

    while len(Vt) < V:
        min_edge,min_weight=find_min_edge(matrix,Vt)
        if min_edge is None:
            break 
        u, v, weight = min_edge 
        Vt.add(v) 
        Et.append((u, v, weight))
        total_weight + weight
    return Et, total_weight

no_vertices = int(input("Enter the number of vertices: "))
graph = []
print("Enter the weight adjacency Matrix:")
for i in range(no_vertices):
    row = list(map(int, input("Enter weight of the vertex (i):").split())) 
    graph.append(row)

minimum_spanning_tree, total_weight = prim(graph) 
print("Minimum Spanning Tree:", minimum_spanning_tree)
print("Total Weight of MST:", total_weight)
